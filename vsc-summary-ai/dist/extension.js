"use strict";var g=Object.create;var l=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var v=Object.getPrototypeOf,k=Object.prototype.hasOwnProperty;var C=(e,o)=>{for(var s in o)l(e,s,{get:o[s],enumerable:!0})},u=(e,o,s,r)=>{if(o&&typeof o=="object"||typeof o=="function")for(let a of S(o))!k.call(e,a)&&a!==s&&l(e,a,{get:()=>o[a],enumerable:!(r=y(o,a))||r.enumerable});return e};var m=(e,o,s)=>(s=e!=null?g(v(e)):{},u(o||!e||!e.__esModule?l(s,"default",{value:e,enumerable:!0}):s,e)),b=e=>u(l({},"__esModule",{value:!0}),e);var x={};C(x,{activate:()=>M,deactivate:()=>I});module.exports=b(x);var w=m(require("vscode"));var n=m(require("vscode")),f=m(require("child_process")),c=m(require("path")),p=require("fs"),d=null;function P(){if(d)return;let e=c.join(__dirname,"..","..","assistant.py");d=f.spawn("python",[e],{cwd:c.dirname(e),detached:!0,stdio:"ignore"}),d.unref(),console.log("\u{1F680} Flask backend started.")}function R(){return fetch("http://127.0.0.1:5001",{method:"GET"}).then(e=>e.ok).catch(()=>!1)}function F(e=10,o=500){return new Promise(s=>{let r=async a=>{await R()?s(!0):a>0?setTimeout(()=>r(a-1),o):s(!1)};r(e)})}async function h(){let e=n.window.createOutputChannel("VSC Summary AI");if(await n.window.showInformationMessage("Welcome to VSC Summary AI",{modal:!0},"Select Repository")==="Select Repository"){let s="",r=!1;for(;!r;){let t=await n.window.showOpenDialog({canSelectMany:!1,canSelectFiles:!1,canSelectFolders:!0,openLabel:"Select Folder"});if(t&&t[0]){s=t[0].fsPath;let i=c.join(s,".git");if(p.existsSync(i)&&p.lstatSync(i).isDirectory())r=!0,console.log("Repository set: ",s);else if(await n.window.showWarningMessage("The selected folder is not a Git repository.","Try Again","Cancel")==="Cancel")break}}if(s===""&&n.window.showWarningMessage("No repository is selected."),P(),!await F()){n.window.showErrorMessage("Flask backend is not running.");return}fetch("http://127.0.0.1:5001/generate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({repo_path:s})}).then(t=>t.json()).then(t=>{let i=t;i.summary?(n.window.showInformationMessage("Summary generated!"),e.appendLine(i.summary),e.show()):n.window.showErrorMessage(i.error||"Something went wrong.")}).catch(t=>{n.window.showErrorMessage(`Request failed: ${t.message}`)})}}function M(e){console.log("VSC Summary AI is now active!");let o=w.commands.registerCommand("vsc-summary-ai.summarise",h);e.subscriptions.push(o)}function I(){}0&&(module.exports={activate,deactivate});
